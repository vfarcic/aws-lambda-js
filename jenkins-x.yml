buildPack: none
pipelineConfig:
  # TODO: Customize depending on the provider	
  env:	
  - name: REGION	
    value: us-west-2	
  - name: AWS_ACCESS_KEY_ID	
    valueFrom:	
      secretKeyRef:	
        key: access-key-id	
        name: aws-lambda	
  - name: AWS_SECRET_ACCESS_KEY	
    valueFrom:	
      secretKeyRef:	
        key: secret-access-key	
        name: aws-lambda
  agent:
    # image: vfarcic/lambda-nodejs:10
    container: nodejs
  pipelines:
    release:
      pipeline:
        agent:
          image: vfarcic/lambda-nodejs:10
        stages:
        - name: setVersion
          steps:
          - name: next-version
            sh: echo `jx-release-version` > VERSION
          - name: tag-version
            sh: jx step tag --version `cat VERSION`
        - name: promote
          steps:
          - name: changelog
            sh: jx step changelog --batch-mode --version v`cat ../../VERSION`
          # TODO: Should we move `deploy` to the staging env. repo? Functions are so small that waiting for the process behind env. repos might be too much.
          - name: deploy
            sh: serverless deploy --verbose --region $REGION --stage production
    pullRequest:
      pipeline:
        agent:
          image: vfarcic/lambda-nodejs:10
        stages:
        - name: build
          steps:
          # TODO: Does it make sense to have a system that will deploy each PR separately? The lifecycle oof functions is much shorter and usually only a single person works on a function.
          # TODO: How can we delete the old PRs? Can we trigger a pipeline when a PR is closed?
          - name: deploy
            sh: serverless deploy --verbose --region $REGION --stage pr

